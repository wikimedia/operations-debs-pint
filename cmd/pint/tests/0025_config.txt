pint.ok --no-color config
! stdout .
cmp stderr stderr.txt

-- stderr.txt --
level=info msg="Loading configuration file" path=.pint.hcl
{
  "ci": {
    "maxCommits": 20,
    "baseBranch": "master"
  },
  "parser": {},
  "prometheus": [
    {
      "name": "prom",
      "uri": "http://127.0.0.1",
      "timeout": "2m",
      "concurrency": 16,
      "rateLimit": 100,
      "uptime": "up",
      "required": true
    },
    {
      "name": "prom-with-failover",
      "uri": "http://127.0.0.1",
      "failover": [
        "http://127.0.0.1",
        "http://127.0.0.1"
      ],
      "timeout": "2m0s",
      "concurrency": 16,
      "rateLimit": 100,
      "uptime": "up",
      "required": false
    },
    {
      "name": "prom-with-tags",
      "uri": "http://127.0.0.1",
      "timeout": "2m0s",
      "concurrency": 16,
      "rateLimit": 100,
      "uptime": "up",
      "tags": [
        "a",
        "@",
        "1"
      ],
      "required": false
    },
    {
      "name": "custom-concurrency",
      "uri": "http://127.0.0.1",
      "timeout": "2m0s",
      "concurrency": 32,
      "rateLimit": 100,
      "uptime": "up",
      "required": false
    },
    {
      "name": "custom-rateLimit",
      "uri": "http://user:pass@127.0.0.1",
      "timeout": "15s",
      "concurrency": 16,
      "rateLimit": 1,
      "uptime": "up",
      "required": false
    }
  ],
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/series",
      "rule/duplicate",
      "rule/label",
      "rule/link",
      "rule/reject"
    ],
    "disabled": [
      "promql/fragile"
    ]
  },
  "check": [
    {
      "ignoreMetrics": [
        ".*_error",
        ".*_error_.*",
        ".*_errors",
        ".*_errors_.*"
      ]
    }
  ],
  "rules": [
    {},
    {
      "reject": [
        {
          "key": ".* +.*",
          "label_keys": true,
          "annotation_keys": true
        },
        {
          "key": "https?://.+",
          "label_keys": true,
          "label_values": true
        }
      ]
    },
    {
      "match": [
        {
          "path": "foo/bar",
          "kind": "alerting"
        }
      ],
      "ignore": [
        {
          "kind": "alerting",
          "label": {
            "key": "notify",
            "value": "blackhole"
          }
        },
        {
          "command": "watch"
        }
      ],
      "annotation": [
        {
          "key": "summary",
          "required": true,
          "severity": "bug"
        }
      ],
      "alerts": {
        "range": "7d",
        "step": "1m",
        "resolve": "5m"
      }
    },
    {
      "match": [
        {
          "kind": "recording"
        }
      ],
      "aggregate": [
        {
          "name": ".+",
          "keep": [
            "job"
          ]
        }
      ]
    },
    {
      "match": [
        {
          "kind": "recording"
        }
      ],
      "cost": {}
    }
  ]
}
-- .pint.hcl --
prometheus "prom" {
  uri     = "http://127.0.0.1"
  timeout = "2m"
  required = true
}

prometheus "prom-with-failover" {
  uri      = "http://127.0.0.1"
  failover = ["http://127.0.0.1", "http://127.0.0.1"]
}

prometheus "prom-with-tags" {
  uri  = "http://127.0.0.1"
  tags = ["a", "@", "1"]
}

prometheus "custom-concurrency" {
  uri         = "http://127.0.0.1"
  required    = false
  concurrency = 32
}

prometheus "custom-rateLimit" {
  uri       = "http://user:pass@127.0.0.1"
  timeout   = "15s"
  rateLimit = 1
}

checks {
  disabled = ["promql/fragile"]
}

check "promql/series" {
  ignoreMetrics = [
    ".*_error",
    ".*_error_.*",
    ".*_errors",
    ".*_errors_.*",
  ]
}

rule{  }

rule {
  reject ".* +.*" {
    label_keys      = true
    annotation_keys = true
  }

  reject "https?://.+" {
    label_keys   = true
    label_values = true
  }
}


rule {
  match {
    kind = "alerting"
    path = "foo/bar"
  }
  ignore {
    kind = "alerting"
    label "notify" {
      value = "blackhole"
    }
  }
  ignore {
    command = "watch"
  }
  alerts {
    range   = "7d"
    step    = "1m"
    resolve = "5m"
  }
  annotation "summary" {
    severity = "bug"
    required = true
  }
}

rule {
  match {
    kind = "recording"
  }
  aggregate ".+" {
    keep = [ "job" ]
  }
}

rule {
  match {
    kind = "recording"
  }
  cost {}
}
